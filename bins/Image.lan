class Pixel
    R, G, B;
    
    func Pixel(R as integer, G as integer, B as integer)
        let this.R = R;
        let this.G = G;
        let this.B = B;
    endfunc
    
    func Pixel(mp)
        let this.R = mp[0];
        let this.G = mp[1];
        let this.B = mp[2];
    endfunc
endclass

class Image
    readonly Bitmap;
    private OriginalPath;
    
    func Image(path as string)
        let this.Bitmap = getImage(path);
        let this.OriginalPath = path;
    endfunc
    
    func Image(W as integer, H as integer)
        let this.Bitmap = newImage(W, H, 0, 0, 0);
        let this.OriginalPath = "Untitled.png";
    endfunc
    
    func Image(W as integer, H as integer, pixel as Pixel)
        let this.Bitmap = newImage(W, H, pixel.R, pixel.G, pixel.B);
        let this.OriginalPath = "Untitled.png";
    endfunc
    
    func Image(W as integer, H as integer, R as integer, G as integer, B as integer)
        let this.Bitmap = newImage(W, H, R, G, B);
        let this.OriginalPath = "Untitled.png";
    endfunc
    
    func GetPixel(X as integer, Y as integer)
        this.__CheckCoords(X, Y);
        return new Pixel(getImagePixel(this.Bitmap, X, Y));
    endfunc
    
    func UpdatePixel(X as integer, Y as integer, pixel as Pixel)
        this.__CheckCoords(X, Y);
        setImagePixel(this.Bitmap, X, Y, pixel.R, pixel, G, pixel, B);
    endfunc
    
    func UpdatePixel(X as integer, Y as integer, R as integer, G as integer, B as integer)
        this.__CheckCoords(X, Y);
        setImagePixel(this.Bitmap, X, Y, R, G, B);
    endfunc
    
    func GetWidth()
        return getImageWidth(this.Bitmap);
    endfunc
    
    func GetHeight()
        return getImageHeight(this.Bitmap);
    endfunc
    
    func drawLine(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer)
        drawImageLine(this.Bitmap,X1,Y1,X2,Y2,0,0,0,1);
    endfunc
    
    func drawLine(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel as Pixel)
        drawImageLine(this.Bitmap,X1,Y1,X2,Y2,pixel.R,pixel.G,pixel.B,1);
    endfunc
    
    func drawLine(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R as integer, G as integer, B as integer)
        drawImageLine(this.Bitmap,X1,Y1,X2,Y2,R,G,B,1);
    endfunc
    
    func drawLine(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel as Pixel, T as integer)
        drawImageLine(this.Bitmap,X1,Y1,X2,Y2,pixel.R,pixel.G,pixel.B,T);
    endfunc
    
    func drawLine(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R as integer, G as integer, B as integer, T as integer)
        drawImageLine(this.Bitmap,X1,Y1,X2,Y2,R,G,B,T);
    endfunc
    
    func drawRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer)
        drawImageRectangle(this.Bitmap, X1, Y1, X2, Y2, 0,0,0,1);
    endfunc
    
    func drawRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel as Pixel)
        drawImageRectangle(this.Bitmap, X1, Y1, X2, Y2, pixel.R,pixel.G,pixel.B,1);
    endfunc
    
    func drawRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R as integer, G as integer, B as integer)
        drawImageRectangle(this.Bitmap, X1, Y1, X2, Y2, R, G, B,1);
    endfunc
    
    func drawRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel as Pixel, T as integer)
        drawImageRectangle(this.Bitmap, X1, Y1, X2, Y2, pixel.R,pixel.G,pixel.B,T);
    endfunc
    
    func drawRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R as integer, G as integer, B as integer, T as integer)
        drawImageRectangle(this.Bitmap, X1, Y1, X2, Y2, R, G, B,T);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, 0, 0, 0, 1, 0 ,0 ,0);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel1 as Pixel)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, pixel1.R, pixel1.G, pixel1.B, 1, pixel1.R, pixel1.G, pixel1.B);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R1 as integer, G1 as integer, B1 as integer)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, R1, G1, B1, 1, R1 ,G1 ,B1);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel1 as Pixel, T as integer)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, pixel1.R, pixel1.G, pixel1.B, T, pixel1.R, pixel1.G, pixel1.B);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R1 as integer, G1 as integer, B1 as integer, T as integer)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, R1, G1, B1, T, R1 ,G1 ,B1);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, pixel1 as Pixel, T as integer, pixel2 as Pixel)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, pixel1.R, pixel1.G, pixel1.B, T, pixel1.R, pixel1.G, pixel1.B);
    endfunc
    
    func drawFilledRectangle(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer, R1 as integer, G1 as integer, B1 as integer, T as integer, R2 as integer, G2 as integer, B2 as integer)
        drawImageFilledRectangle(this.Bitmap, X1, Y1, X2, Y2, R1, G1, B1, T, R2 ,G2 ,B2);
    endfunc
    
    func drawCircle(X as integer, Y as integer, RAD as integer)
        drawImageCircle(this.Bitmap, X, Y, RAD, 0, 0, 0, 1);
    endfunc
    
    func drawCircle(X as integer, Y as integer, RAD as integer, pixel as Pixel)
        drawImageCircle(this.Bitmap, X, Y, RAD, pixel.R, pixel.G, pixel.B, 1);
    endfunc
    
    func drawCircle(X as integer, Y as integer, RAD as integer, R as integer, G as integer, B as integer)
        drawImageCircle(this.Bitmap, X, Y, RAD, R, G, B, 1);
    endfunc
    
    func drawCircle(X as integer, Y as integer, RAD as integer, pixel as Pixel, T as integer)
        drawImageCircle(this.Bitmap, X, Y, RAD, pixel.R, pixel.G, pixel.B, T);
    endfunc
    
    func drawCircle(X as integer, Y as integer, RAD as integer, R as integer, G as integer, B as integer, T as integer)
        drawImageCircle(this.Bitmap, X, Y, RAD, R, G, B, T);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, 0, 0, 0, 1, 0, 0, 0);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, pixel as Pixel)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, pixel.R, pixel.G, pixel.B, 1, pixel.R, pixel.G, pixel.B);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, R as integer, G as integer, B as integer)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, R, G, B, 1, R, G, B);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, pixel as Pixel, T as integer)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, pixel.R, pixel.G, pixel.B, T, pixel.R, pixel.G, pixel.B);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, R as integer, G as integer, B as integer, T as integer)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, R, G, B, T, R, G, B);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, pixel as Pixel, T as integer, pixel2 as Pixel)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, pixel.R, pixel.G, pixel.B, T, pixel2.R, pixel2.G, pixel2.B);
    endfunc
    
    func drawFilledCircle(X as integer, Y as integer, RAD as integer, R as integer, G as integer, B as integer, T as integer, R2 as integer, G2 as integer, B2 as integer)
        drawImageFilledCircle(this.Bitmap, X, Y, RAD, R, G, B, T, R2, G2, B2);
    endfunc
    
    func drawText(text as string, X as integer, Y as integer)
        drawImageText(this.Bitmap, text, X, Y, 0, 0, 0, 12, "Arial");
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, pixel as Pixel)
        drawImageText(this.Bitmap, text, X, Y, pixel.R, pixel.G, pixelB, 12, "Arial");
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, R as integer, G as integer, B as integer)
        drawImageText(this.Bitmap, text, X, Y, R, G, B, 12, "Arial");
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, pixel as Pixel, Size as integer)
        drawImageText(this.Bitmap, text, X, Y, pixel.R, pixel.G, pixelB, Size, "Arial");
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, R as integer, G as integer, B as integer, Size as integer)
        drawImageText(this.Bitmap, text, X, Y, R, G, B, Size, "Arial");
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, pixel as Pixel, Size as integer, Font as string)
        drawImageText(this.Bitmap, text, X, Y, pixel.R, pixel.G, pixelB, Size, Font);
    endfunc
    
    func drawText(text as string, X as integer, Y as integer, R as integer, G as integer, B as integer, Size as integer, Font as string)
        drawImageText(this.Bitmap, text, X, Y, R, G, B, Size, Font);
    endfunc
    
    func drawImage(image as Image)
        drawImageImage(this.Bitmap, image.Bitmap, 0, 0);
    endfunc
    
    func drawImage(image as Image, X as integer, Y as integer)
        drawImageImage(this.Bitmap, image.Bitmap, X, Y);
    endfunc
    
    func getTextWidth(text as string)
        return getTextWidth(text, "Arial", 12);
    endfunc
    
    func getTextWidth(text as string, Font as string)
        return getTextWidth(text, Font, 12);
    endfunc
    
    func getTextWidth(text as string, Size as integer)
        return getTextWidth(text, "Arial", Size);
    endfunc
    
    func getTextWidth(text as string, Font as string, Size as integer)
        return getTextWidth(text, Font, Size);
    endfunc
        func getTextHeight(text as string)
        return getTextHeight(text, "Arial", 12);
    endfunc
    
    func getTextHeight(text as string, Font as string)
        return getTextHeight(text, Font, 12);
    endfunc
    
    func getTextHeight(text as string, Size as integer)
        return getTextHeight(text, "Arial", Size);
    endfunc
    
    func getTextHeight(text as string, Font as string, Size as integer)
        return getTextHeight(text, Font, Size);
    endfunc
    
    func cropImage(X1 as integer, Y1 as integer, X2 as integer, Y2 as integer)
        cropImage(this.Bitmap, X1, Y1, X2, Y2);
    endfunc
    
     func Save()
        saveImage(this.Bitmap, this.OriginalPath);
    endfunc
    
    func Save(path as string)
        saveImage(this.Bitmap, path);
    endfunc
    
    private func __CheckCoords(X, Y)
        if(X < 0 | X >= this.GetWidth() | Y < 0 | Y > this.GetHeight())
            raise "Coordinates out of bounds!";
        endif
    endfunc
endclass
